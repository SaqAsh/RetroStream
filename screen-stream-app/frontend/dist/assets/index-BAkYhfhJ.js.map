{"version":3,"file":"index-BAkYhfhJ.js","sources":["../../src/utils/EventEmitter.ts","../../src/stream/FrameBuffer.ts","../../node_modules/fflate/esm/browser.js","../../src/stream/Decompressor.ts","../../src/stream/StreamClient.ts","../../src/ui/UIController.ts","../../src/utils/Logger.ts","../../src/config/Config.ts","../../src/main.ts"],"sourcesContent":["export type EventHandler<T = unknown> = (data: T) => void;\n\nexport class EventEmitter<TEvents extends Record<string, unknown> = Record<string, unknown>> {\n  private events: Map<keyof TEvents, Set<EventHandler<TEvents[keyof TEvents]>>> = new Map();\n\n  public on<K extends keyof TEvents>(event: K, handler: EventHandler<TEvents[K]>): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event)!.add(handler as EventHandler<TEvents[keyof TEvents]>);\n  }\n\n  public off<K extends keyof TEvents>(event: K, handler: EventHandler<TEvents[K]>): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.delete(handler as EventHandler<TEvents[keyof TEvents]>);\n      if (handlers.size === 0) {\n        this.events.delete(event);\n      }\n    }\n  }\n\n  public emit<K extends keyof TEvents>(event: K, data: TEvents[K]): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error(`Error in event handler for '${String(event)}':`, error);\n        }\n      });\n    }\n  }\n\n  public once<K extends keyof TEvents>(event: K, handler: EventHandler<TEvents[K]>): void {\n    const onceHandler: EventHandler<TEvents[K]> = (data) => {\n      handler(data);\n      this.off(event, onceHandler);\n    };\n    this.on(event, onceHandler);\n  }\n\n  public removeAllListeners<K extends keyof TEvents>(event?: K): void {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n\n  public listenerCount<K extends keyof TEvents>(event: K): number {\n    return this.events.get(event)?.size || 0;\n  }\n\n  public hasListeners<K extends keyof TEvents>(event: K): boolean {\n    return this.listenerCount(event) > 0;\n  }\n}\n","import { FrameMetadata } from './StreamClient';\n\nexport interface BufferedFrame {\n  imageData: ImageData;\n  metadata: FrameMetadata;\n  timestamp: number;\n}\n\nexport class FrameBuffer {\n  private buffer: BufferedFrame[] = [];\n  private maxSize: number;\n  private currentIndex = 0;\n\n  constructor(maxSize: number) {\n    this.maxSize = maxSize;\n  }\n\n  public addFrame(frame: BufferedFrame): void {\n    this.buffer.push(frame);\n    \n    // Remove old frames if buffer is full\n    if (this.buffer.length > this.maxSize) {\n      this.buffer.shift();\n    }\n    \n    // Update current index to point to the latest frame\n    this.currentIndex = this.buffer.length - 1;\n  }\n\n  public getLatestFrame(): BufferedFrame | null {\n    if (this.buffer.length === 0) {\n      return null;\n    }\n    \n    return this.buffer[this.buffer.length - 1];\n  }\n\n  public getFrame(index: number): BufferedFrame | null {\n    if (index < 0 || index >= this.buffer.length) {\n      return null;\n    }\n    \n    return this.buffer[index];\n  }\n\n  public getCurrentFrame(): BufferedFrame | null {\n    return this.getFrame(this.currentIndex);\n  }\n\n  public nextFrame(): BufferedFrame | null {\n    if (this.currentIndex < this.buffer.length - 1) {\n      this.currentIndex++;\n    }\n    return this.getCurrentFrame();\n  }\n\n  public previousFrame(): BufferedFrame | null {\n    if (this.currentIndex > 0) {\n      this.currentIndex--;\n    }\n    return this.getCurrentFrame();\n  }\n\n  public seekToLatest(): BufferedFrame | null {\n    this.currentIndex = Math.max(0, this.buffer.length - 1);\n    return this.getCurrentFrame();\n  }\n\n  public getBufferSize(): number {\n    return this.buffer.length;\n  }\n\n  public getMaxSize(): number {\n    return this.maxSize;\n  }\n\n  public clear(): void {\n    this.buffer = [];\n    this.currentIndex = 0;\n  }\n\n  public getBufferHealth(): number {\n    // Returns a value between 0 and 1 indicating buffer health\n    // 1 = buffer is full, 0 = buffer is empty\n    return this.buffer.length / this.maxSize;\n  }\n\n  public getOldestFrameAge(): number {\n    if (this.buffer.length === 0) {\n      return 0;\n    }\n    \n    const oldestFrame = this.buffer[0];\n    return Date.now() - oldestFrame.timestamp;\n  }\n\n  public getLatency(): number {\n    const latestFrame = this.getLatestFrame();\n    if (!latestFrame) {\n      return 0;\n    }\n    \n    return latestFrame.metadata.latency || 0;\n  }\n\n  public dropOldFrames(maxAge: number): number {\n    const now = Date.now();\n    let dropped = 0;\n    \n    while (this.buffer.length > 0 && (now - this.buffer[0].timestamp) > maxAge) {\n      this.buffer.shift();\n      dropped++;\n    }\n    \n    // Adjust current index\n    this.currentIndex = Math.max(0, this.currentIndex - dropped);\n    \n    return dropped;\n  }\n\n  public getFrameStats(): {\n    bufferSize: number;\n    maxSize: number;\n    currentIndex: number;\n    oldestFrameAge: number;\n    latency: number;\n    bufferHealth: number;\n  } {\n    return {\n      bufferSize: this.getBufferSize(),\n      maxSize: this.getMaxSize(),\n      currentIndex: this.currentIndex,\n      oldestFrameAge: this.getOldestFrameAge(),\n      latency: this.getLatency(),\n      bufferHealth: this.getBufferHealth(),\n    };\n  }\n}\n","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n","import { decompress as fflateDecompress } from 'fflate';\n\nexport class Decompressor {\n  private decoder: TextDecoder;\n\n  constructor() {\n    this.decoder = new TextDecoder();\n  }\n\n  public async decompress(compressedData: Uint8Array): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n      try {\n        // For now, we'll use a simple approach\n        // In a real implementation, you'd want to use the same compression\n        // algorithm as the backend (zstd)\n        \n        // Since zstd isn't available in browsers, we'll use fflate for now\n        // This is a placeholder - in production you'd want to:\n        // 1. Use a WebAssembly zstd implementation\n        // 2. Or switch the backend to use gzip/deflate\n        \n        fflateDecompress(compressedData, (err, decompressed) => {\n          if (err) {\n            reject(new Error(`Decompression failed: ${err.message}`));\n          } else {\n            resolve(decompressed);\n          }\n        });\n        \n      } catch (error) {\n        reject(new Error(`Decompression error: ${error}`));\n      }\n    });\n  }\n\n  public async decompressZstd(compressedData: Uint8Array): Promise<Uint8Array> {\n    // Placeholder for zstd decompression\n    // This would require a WebAssembly zstd implementation\n    throw new Error('Zstd decompression not implemented yet');\n  }\n\n  public isCompressionSupported(algorithm: string): boolean {\n    switch (algorithm.toLowerCase()) {\n      case 'gzip':\n      case 'deflate':\n        return true;\n      case 'zstd':\n        return false; // Not implemented yet\n      default:\n        return false;\n    }\n  }\n\n  public async decompressGzip(compressedData: Uint8Array): Promise<Uint8Array> {\n    return new Promise((resolve, reject) => {\n      fflateDecompress(compressedData, (err, decompressed) => {\n        if (err) {\n          reject(new Error(`Gzip decompression failed: ${err.message}`));\n        } else {\n          resolve(decompressed);\n        }\n      });\n    });\n  }\n\n  public getStats(): {\n    totalDecompressions: number;\n    totalInputBytes: number;\n    totalOutputBytes: number;\n    averageCompressionRatio: number;\n  } {\n    // Placeholder for compression statistics\n    return {\n      totalDecompressions: 0,\n      totalInputBytes: 0,\n      totalOutputBytes: 0,\n      averageCompressionRatio: 1.0,\n    };\n  }\n}\n","import { EventEmitter } from '../utils/EventEmitter';\nimport { Logger } from '../utils/Logger';\nimport { Config, QualityConfig, QualitySettings } from '../config/Config';\nimport { FrameBuffer } from './FrameBuffer';\nimport { Decompressor } from './Decompressor';\n\nexport interface FrameMetadata {\n  width: number;\n  height: number;\n  compressed: boolean;\n  timestamp: number;\n  frameId: number;\n  latency?: number;\n}\n\nexport interface StreamStats {\n  fps: number;\n  latency: number;\n  droppedFrames: number;\n  totalFrames: number;\n}\n\ninterface StreamEvents extends Record<string, unknown> {\n  connected: void;\n  disconnected: void;\n  error: Error;\n  frame: { data: ImageData; metadata: FrameMetadata };\n  stats: StreamStats;\n}\n\nexport class StreamClient extends EventEmitter<StreamEvents> {\n  private ws?: WebSocket;\n  private config: Config;\n  private logger: Logger;\n  private frameBuffer: FrameBuffer;\n  private decompressor: Decompressor;\n  \n  private reconnectAttempts = 0;\n  private reconnectTimer?: number;\n  private heartbeatTimer?: number;\n  private statsTimer?: number;\n  \n  private currentQuality: keyof QualitySettings = 'medium';\n  private isConnected = false;\n  private isPaused = false;\n  \n  private stats: StreamStats = {\n    fps: 0,\n    latency: 0,\n    droppedFrames: 0,\n    totalFrames: 0,\n  };\n  \n  private fpsCounter = {\n    frames: 0,\n    lastTime: Date.now(),\n    currentFPS: 0,\n  };\n\n  constructor(config: Config, logger: Logger) {\n    super();\n    this.config = config;\n    this.logger = logger;\n    this.frameBuffer = new FrameBuffer(config.getBufferSize());\n    this.decompressor = new Decompressor();\n    \n    this.setupStatsTracking();\n  }\n\n  public async connect(): Promise<void> {\n    if (this.isConnected || this.ws?.readyState === WebSocket.CONNECTING) {\n      return;\n    }\n\n    try {\n      this.logger.info(`Connecting to ${this.config.getServerUrl()}`);\n      \n      this.ws = new WebSocket(this.config.getServerUrl());\n      this.ws.binaryType = 'arraybuffer';\n      \n      this.setupWebSocketHandlers();\n      \n      // Wait for connection or timeout\n      await this.waitForConnection();\n      \n    } catch (error) {\n      this.logger.error('Connection failed:', error);\n      this.handleConnectionError(error as Error);\n      throw error;\n    }\n  }\n\n  private setupWebSocketHandlers(): void {\n    if (!this.ws) return;\n\n    this.ws.onopen = () => {\n      this.logger.info('WebSocket connected');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.startHeartbeat();\n      this.emit('connected', undefined);\n    };\n\n    this.ws.onclose = (event) => {\n      this.logger.warning(`WebSocket closed: ${event.code} - ${event.reason}`);\n      this.handleDisconnection();\n    };\n\n    this.ws.onerror = (error) => {\n      this.logger.error('WebSocket error:', error);\n      this.handleConnectionError(new Error('WebSocket error'));\n    };\n\n    this.ws.onmessage = (event) => {\n      if (!this.isPaused) {\n        this.handleMessage(event.data);\n      }\n    };\n  }\n\n  private async waitForConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (!this.ws) {\n        reject(new Error('WebSocket not initialized'));\n        return;\n      }\n\n      const timeout = setTimeout(() => {\n        reject(new Error('Connection timeout'));\n      }, 10000);\n\n      this.ws.addEventListener('open', () => {\n        clearTimeout(timeout);\n        resolve();\n      });\n\n      this.ws.addEventListener('error', () => {\n        clearTimeout(timeout);\n        reject(new Error('Connection failed'));\n      });\n    });\n  }\n\n  private handleMessage(data: ArrayBuffer): void {\n    try {\n      const frameData = this.parseFrameMessage(data);\n      if (frameData) {\n        this.processFrame(frameData.header, frameData.payload);\n      }\n    } catch (error) {\n      this.logger.error('Error processing frame:', error);\n    }\n  }\n\n  private parseFrameMessage(data: ArrayBuffer): { header: FrameMetadata; payload: ArrayBuffer } | null {\n    const view = new DataView(data);\n    \n    if (data.byteLength < 4) {\n      this.logger.warning('Frame message too short');\n      return null;\n    }\n\n    const headerLength = view.getUint32(0, true);\n    \n    if (data.byteLength < 4 + headerLength) {\n      this.logger.warning('Invalid frame message format');\n      return null;\n    }\n\n    const headerBytes = data.slice(4, 4 + headerLength);\n    const headerText = new TextDecoder().decode(headerBytes);\n    \n    try {\n      const header = JSON.parse(headerText) as FrameMetadata;\n      const payload = data.slice(4 + headerLength);\n      \n      // Calculate latency\n      header.latency = Date.now() - header.timestamp;\n      \n      return { header, payload };\n    } catch (error) {\n      this.logger.error('Failed to parse frame header:', error);\n      return null;\n    }\n  }\n\n  private async processFrame(metadata: FrameMetadata, payload: ArrayBuffer): Promise<void> {\n    try {\n      // Update stats\n      this.stats.totalFrames++;\n      this.updateFPS();\n\n      // For now, assume data is uncompressed RGBA\n      const frameData = new Uint8Array(payload);\n      \n      // Validate frame size\n      const expectedSize = metadata.width * metadata.height * 4;\n      if (frameData.length !== expectedSize) {\n        this.logger.warning(`Frame size mismatch: expected ${expectedSize}, got ${frameData.length}`);\n        return;\n      }\n\n      // Create ImageData\n      const imageData = new ImageData(\n        new Uint8ClampedArray(frameData),\n        metadata.width,\n        metadata.height\n      );\n\n      // Buffer frame\n      this.frameBuffer.addFrame({\n        imageData,\n        metadata,\n        timestamp: Date.now(),\n      });\n\n      // Emit the latest frame\n      const latestFrame = this.frameBuffer.getLatestFrame();\n      if (latestFrame) {\n        this.emit('frame', {\n          data: latestFrame.imageData,\n          metadata: latestFrame.metadata,\n        });\n      }\n\n    } catch (error) {\n      this.logger.error('Error processing frame:', error);\n      this.stats.droppedFrames++;\n    }\n  }\n\n  private updateFPS(): void {\n    this.fpsCounter.frames++;\n    const now = Date.now();\n    \n    if (now - this.fpsCounter.lastTime >= 1000) {\n      this.fpsCounter.currentFPS = this.fpsCounter.frames;\n      this.fpsCounter.frames = 0;\n      this.fpsCounter.lastTime = now;\n      \n      this.stats.fps = this.fpsCounter.currentFPS;\n    }\n  }\n\n  private setupStatsTracking(): void {\n    this.statsTimer = window.setInterval(() => {\n      if (this.isConnected) {\n        const latestFrame = this.frameBuffer.getLatestFrame();\n        if (latestFrame) {\n          this.stats.latency = latestFrame.metadata.latency || 0;\n        }\n        \n        this.emit('stats', { ...this.stats });\n      }\n    }, 1000);\n  }\n\n  private startHeartbeat(): void {\n    this.heartbeatTimer = window.setInterval(() => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        this.ws.send(JSON.stringify({ type: 'ping' }));\n      }\n    }, this.config.getHeartbeatInterval());\n  }\n\n  private handleDisconnection(): void {\n    this.isConnected = false;\n    this.stopHeartbeat();\n    this.emit('disconnected', undefined);\n    \n    if (this.reconnectAttempts < this.config.getReconnectAttempts()) {\n      this.scheduleReconnect();\n    }\n  }\n\n  private handleConnectionError(error: Error): void {\n    this.isConnected = false;\n    this.emit('error', error);\n    \n    if (this.reconnectAttempts < this.config.getReconnectAttempts()) {\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect(): void {\n    this.reconnectAttempts++;\n    const delay = this.config.getReconnectDelay() * Math.pow(2, this.reconnectAttempts - 1);\n    \n    this.logger.info(`Scheduling reconnect attempt ${this.reconnectAttempts} in ${delay}ms`);\n    \n    this.reconnectTimer = window.setTimeout(() => {\n      this.connect().catch((error) => {\n        this.logger.error('Reconnection failed:', error);\n      });\n    }, delay);\n  }\n\n  private stopHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = undefined;\n    }\n  }\n\n  public disconnect(): void {\n    this.logger.info('Disconnecting from stream server');\n    \n    this.isConnected = false;\n    \n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = undefined;\n    }\n    \n    this.stopHeartbeat();\n    \n    if (this.statsTimer) {\n      clearInterval(this.statsTimer);\n      this.statsTimer = undefined;\n    }\n    \n    if (this.ws) {\n      this.ws.close(1000, 'Client disconnect');\n      this.ws = undefined;\n    }\n    \n    this.emit('disconnected', undefined);\n  }\n\n  public pause(): void {\n    this.isPaused = true;\n    this.logger.debug('Stream paused');\n  }\n\n  public resume(): void {\n    this.isPaused = false;\n    this.logger.debug('Stream resumed');\n  }\n\n  public setQuality(quality: keyof QualitySettings): void {\n    this.currentQuality = quality;\n    \n    if (this.ws?.readyState === WebSocket.OPEN) {\n      const qualityConfig = this.config.getQuality(quality);\n      this.ws.send(JSON.stringify({\n        type: 'quality',\n        config: qualityConfig,\n      }));\n    }\n  }\n\n  public getCurrentFPS(): number {\n    return this.fpsCounter.currentFPS;\n  }\n\n  public getStats(): StreamStats {\n    return { ...this.stats };\n  }\n\n  public isConnectedState(): boolean {\n    return this.isConnected;\n  }\n}\n","import { EventEmitter } from '../utils/EventEmitter';\nimport { Logger } from '../utils/Logger';\nimport { FrameMetadata } from '../stream/StreamClient';\n\ninterface UIEvents extends Record<string, unknown> {\n  reconnect: void;\n  qualityChange: string;\n  scaleChange: number;\n  fullscreen: void;\n  screenshot: void;\n}\n\nexport interface StreamStats {\n  fps: number;\n  latency: number;\n}\n\nexport class UIController extends EventEmitter<UIEvents> {\n  private logger: Logger;\n  \n  // DOM elements\n  private canvas?: HTMLCanvasElement;\n  private ctx?: CanvasRenderingContext2D;\n  private connectionStatus?: HTMLElement;\n  private fpsCounter?: HTMLElement;\n  private latencyCounter?: HTMLElement;\n  private loadingOverlay?: HTMLElement;\n  private errorOverlay?: HTMLElement;\n  private reconnectBtn?: HTMLButtonElement;\n  private qualitySelect?: HTMLSelectElement;\n  private scaleSlider?: HTMLInputElement;\n  private scaleValue?: HTMLElement;\n  private fullscreenBtn?: HTMLButtonElement;\n  private screenshotBtn?: HTMLButtonElement;\n  \n  private currentScale = 1;\n  private isFullscreen = false;\n\n  constructor(logger: Logger) {\n    super();\n    this.logger = logger;\n  }\n\n  public async initialize(): Promise<void> {\n    this.logger.info('Initializing UI controller...');\n    \n    await this.setupDOMElements();\n    this.setupEventHandlers();\n    this.setupCanvas();\n    \n    this.logger.info('UI controller initialized');\n  }\n\n  private async setupDOMElements(): Promise<void> {\n    // Wait for DOM to be ready\n    if (document.readyState === 'loading') {\n      await new Promise(resolve => {\n        document.addEventListener('DOMContentLoaded', resolve);\n      });\n    }\n\n    // Get DOM elements\n    this.canvas = document.getElementById('screen-canvas') as HTMLCanvasElement;\n    this.connectionStatus = document.getElementById('connection-status');\n    this.fpsCounter = document.getElementById('fps-counter');\n    this.latencyCounter = document.getElementById('latency-counter');\n    this.loadingOverlay = document.getElementById('loading-overlay');\n    this.errorOverlay = document.getElementById('error-overlay');\n    this.reconnectBtn = document.getElementById('reconnect-btn') as HTMLButtonElement;\n    this.qualitySelect = document.getElementById('quality-select') as HTMLSelectElement;\n    this.scaleSlider = document.getElementById('scale-slider') as HTMLInputElement;\n    this.scaleValue = document.getElementById('scale-value');\n    this.fullscreenBtn = document.getElementById('fullscreen-btn') as HTMLButtonElement;\n    this.screenshotBtn = document.getElementById('screenshot-btn') as HTMLButtonElement;\n\n    if (!this.canvas) {\n      throw new Error('Canvas element not found');\n    }\n\n    this.ctx = this.canvas.getContext('2d');\n    if (!this.ctx) {\n      throw new Error('Failed to get 2D context');\n    }\n  }\n\n  private setupEventHandlers(): void {\n    // Reconnect button\n    this.reconnectBtn?.addEventListener('click', () => {\n      this.emit('reconnect', undefined);\n      this.hideError();\n    });\n\n    // Quality selector\n    this.qualitySelect?.addEventListener('change', (e) => {\n      const target = e.target as HTMLSelectElement;\n      this.emit('qualityChange', target.value);\n    });\n\n    // Scale slider\n    this.scaleSlider?.addEventListener('input', (e) => {\n      const target = e.target as HTMLInputElement;\n      const scale = parseFloat(target.value);\n      this.setScale(scale);\n      this.emit('scaleChange', scale);\n    });\n\n    // Fullscreen button\n    this.fullscreenBtn?.addEventListener('click', () => {\n      this.emit('fullscreen', undefined);\n    });\n\n    // Screenshot button\n    this.screenshotBtn?.addEventListener('click', () => {\n      this.emit('screenshot', undefined);\n    });\n\n    // Keyboard shortcuts\n    document.addEventListener('keydown', (e) => {\n      if (e.code === 'F11') {\n        e.preventDefault();\n        this.emit('fullscreen', undefined);\n      } else if (e.ctrlKey && e.code === 'KeyS') {\n        e.preventDefault();\n        this.emit('screenshot', undefined);\n      }\n    });\n\n    // Handle fullscreen changes\n    document.addEventListener('fullscreenchange', () => {\n      this.isFullscreen = !!document.fullscreenElement;\n      this.updateFullscreenButton();\n    });\n  }\n\n  private setupCanvas(): void {\n    if (!this.canvas) return;\n\n    // Set initial canvas size\n    this.resizeCanvas(1280, 720);\n    \n    // Handle window resize\n    window.addEventListener('resize', () => {\n      this.handleResize();\n    });\n  }\n\n  private resizeCanvas(width: number, height: number): void {\n    if (!this.canvas) return;\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n    \n    // Apply scaling\n    this.applyCanvasScale();\n  }\n\n  private applyCanvasScale(): void {\n    if (!this.canvas) return;\n\n    const scaledWidth = this.canvas.width * this.currentScale;\n    const scaledHeight = this.canvas.height * this.currentScale;\n    \n    this.canvas.style.width = `${scaledWidth}px`;\n    this.canvas.style.height = `${scaledHeight}px`;\n  }\n\n  public renderFrame(frameData: ImageData, metadata: FrameMetadata): void {\n    if (!this.ctx || !this.canvas) return;\n\n    try {\n      // Resize canvas if frame dimensions changed\n      if (this.canvas.width !== metadata.width || this.canvas.height !== metadata.height) {\n        this.resizeCanvas(metadata.width, metadata.height);\n      }\n\n      // Render frame\n      this.ctx.putImageData(frameData, 0, 0);\n      \n      // Hide loading overlay on first frame\n      if (this.loadingOverlay && !this.loadingOverlay.classList.contains('hidden')) {\n        this.loadingOverlay.classList.add('hidden');\n      }\n\n    } catch (error) {\n      this.logger.error('Error rendering frame:', error);\n    }\n  }\n\n  public setConnectionStatus(status: 'connected' | 'connecting' | 'disconnected' | 'error'): void {\n    if (!this.connectionStatus) return;\n\n    // Remove all status classes\n    this.connectionStatus.classList.remove('connected', 'connecting', 'error');\n    \n    // Add current status class\n    if (status !== 'disconnected') {\n      this.connectionStatus.classList.add(status);\n    }\n\n    // Update text\n    const statusText = {\n      connected: 'CONNECTED',\n      connecting: 'CONNECTING...',\n      disconnected: 'DISCONNECTED',\n      error: 'ERROR'\n    };\n    \n    this.connectionStatus.textContent = statusText[status];\n\n    // Show/hide loading overlay\n    if (status === 'connecting') {\n      this.showLoading();\n    } else if (status === 'connected') {\n      this.hideLoading();\n      this.hideError();\n    } else if (status === 'error') {\n      this.hideLoading();\n      this.showError('Connection failed');\n    } else {\n      this.showLoading();\n    }\n  }\n\n  public updateStats(stats: StreamStats): void {\n    if (this.fpsCounter) {\n      this.fpsCounter.textContent = stats.fps.toString();\n    }\n    \n    if (this.latencyCounter) {\n      this.latencyCounter.textContent = `${stats.latency}ms`;\n    }\n  }\n\n  public setScale(scale: number): void {\n    this.currentScale = scale;\n    this.applyCanvasScale();\n    \n    if (this.scaleValue) {\n      this.scaleValue.textContent = `${Math.round(scale * 100)}%`;\n    }\n    \n    if (this.scaleSlider) {\n      this.scaleSlider.value = scale.toString();\n    }\n  }\n\n  public toggleFullscreen(): void {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen().catch(err => {\n        this.logger.error('Error attempting to enable fullscreen:', err);\n      });\n    } else {\n      document.exitFullscreen().catch(err => {\n        this.logger.error('Error attempting to exit fullscreen:', err);\n      });\n    }\n  }\n\n  public takeScreenshot(): void {\n    if (!this.canvas) return;\n\n    try {\n      const link = document.createElement('a');\n      link.download = `screenshot-${Date.now()}.png`;\n      link.href = this.canvas.toDataURL();\n      link.click();\n      \n      this.logger.info('Screenshot saved');\n    } catch (error) {\n      this.logger.error('Failed to take screenshot:', error);\n    }\n  }\n\n  public handleResize(): void {\n    // Reapply canvas scaling on window resize\n    this.applyCanvasScale();\n  }\n\n  private showLoading(): void {\n    if (this.loadingOverlay) {\n      this.loadingOverlay.classList.remove('hidden');\n    }\n  }\n\n  private hideLoading(): void {\n    if (this.loadingOverlay) {\n      this.loadingOverlay.classList.add('hidden');\n    }\n  }\n\n  public showError(message: string): void {\n    if (this.errorOverlay) {\n      this.errorOverlay.classList.remove('hidden');\n      const errorText = this.errorOverlay.querySelector('.error-text');\n      if (errorText) {\n        errorText.textContent = message.toUpperCase();\n      }\n    }\n  }\n\n  private hideError(): void {\n    if (this.errorOverlay) {\n      this.errorOverlay.classList.add('hidden');\n    }\n  }\n\n  private updateFullscreenButton(): void {\n    if (this.fullscreenBtn) {\n      this.fullscreenBtn.textContent = this.isFullscreen ? 'EXIT FULL' : 'FULLSCREEN';\n    }\n  }\n\n  public getCanvas(): HTMLCanvasElement | undefined {\n    return this.canvas;\n  }\n\n  public getCurrentScale(): number {\n    return this.currentScale;\n  }\n\n  public isInFullscreen(): boolean {\n    return this.isFullscreen;\n  }\n}\n","export enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARNING = 2,\n  ERROR = 3,\n}\n\nexport interface LogEntry {\n  timestamp: Date;\n  level: LogLevel;\n  message: string;\n  data?: unknown;\n}\n\nexport class Logger {\n  private logs: LogEntry[] = [];\n  private maxLogs = 100;\n  private logLevel = LogLevel.INFO;\n  private logContainer?: HTMLElement;\n\n  constructor() {\n    this.setupLogContainer();\n  }\n\n  private setupLogContainer(): void {\n    // Wait for DOM to be ready\n    const setup = () => {\n      this.logContainer = document.getElementById('log-container');\n    };\n\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', setup);\n    } else {\n      setup();\n    }\n  }\n\n  private log(level: LogLevel, message: string, data?: unknown): void {\n    const entry: LogEntry = {\n      timestamp: new Date(),\n      level,\n      message,\n      data,\n    };\n\n    this.logs.push(entry);\n    \n    // Maintain max log size\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n\n    // Console output\n    if (level >= this.logLevel) {\n      const timestamp = entry.timestamp.toLocaleTimeString();\n      const levelStr = LogLevel[level];\n      const consoleMessage = `[${timestamp}] ${levelStr}: ${message}`;\n      \n      switch (level) {\n        case LogLevel.DEBUG:\n          console.debug(consoleMessage, data);\n          break;\n        case LogLevel.INFO:\n          console.info(consoleMessage, data);\n          break;\n        case LogLevel.WARNING:\n          console.warn(consoleMessage, data);\n          break;\n        case LogLevel.ERROR:\n          console.error(consoleMessage, data);\n          break;\n      }\n    }\n\n    // UI output\n    this.updateLogDisplay(entry);\n  }\n\n  private updateLogDisplay(entry: LogEntry): void {\n    if (!this.logContainer) return;\n\n    const logElement = document.createElement('div');\n    logElement.className = `log-entry ${LogLevel[entry.level].toLowerCase()}`;\n    \n    const timestamp = entry.timestamp.toLocaleTimeString();\n    const prefix = this.getLogPrefix(entry.level);\n    logElement.textContent = `${timestamp} ${prefix} ${entry.message}`;\n\n    this.logContainer.appendChild(logElement);\n\n    // Remove old entries if too many\n    while (this.logContainer.children.length > 50) {\n      this.logContainer.removeChild(this.logContainer.firstChild!);\n    }\n\n    // Auto-scroll to bottom\n    this.logContainer.scrollTop = this.logContainer.scrollHeight;\n  }\n\n  private getLogPrefix(level: LogLevel): string {\n    switch (level) {\n      case LogLevel.DEBUG: return '[DBG]';\n      case LogLevel.INFO: return '[INF]';\n      case LogLevel.WARNING: return '[WRN]';\n      case LogLevel.ERROR: return '[ERR]';\n      default: return '[LOG]';\n    }\n  }\n\n  public debug(message: string, data?: unknown): void {\n    this.log(LogLevel.DEBUG, message, data);\n  }\n\n  public info(message: string, data?: unknown): void {\n    this.log(LogLevel.INFO, message, data);\n  }\n\n  public warning(message: string, data?: unknown): void {\n    this.log(LogLevel.WARNING, message, data);\n  }\n\n  public error(message: string, data?: unknown): void {\n    this.log(LogLevel.ERROR, message, data);\n  }\n\n  public setLogLevel(level: LogLevel): void {\n    this.logLevel = level;\n  }\n\n  public getLogs(): LogEntry[] {\n    return [...this.logs];\n  }\n\n  public clearLogs(): void {\n    this.logs = [];\n    if (this.logContainer) {\n      this.logContainer.innerHTML = '<div class=\"log-entry\">> System initialized</div>';\n    }\n  }\n}\n","export interface StreamConfig {\n  serverUrl: string;\n  reconnectAttempts: number;\n  reconnectDelay: number;\n  heartbeatInterval: number;\n  bufferSize: number;\n  qualitySettings: QualitySettings;\n}\n\nexport interface QualitySettings {\n  high: QualityConfig;\n  medium: QualityConfig;\n  low: QualityConfig;\n}\n\nexport interface QualityConfig {\n  maxWidth: number;\n  maxHeight: number;\n  targetFPS: number;\n  compressionLevel: number;\n}\n\nexport class Config {\n  private config: StreamConfig;\n\n  constructor() {\n    this.config = this.getDefaultConfig();\n    this.loadFromEnvironment();\n  }\n\n  private getDefaultConfig(): StreamConfig {\n    return {\n      serverUrl: this.createServerUrl(),\n      reconnectAttempts: 5,\n      reconnectDelay: 2000,\n      heartbeatInterval: 30000,\n      bufferSize: 3,\n      qualitySettings: {\n        high: {\n          maxWidth: 1920,\n          maxHeight: 1080,\n          targetFPS: 30,\n          compressionLevel: 1,\n        },\n        medium: {\n          maxWidth: 1280,\n          maxHeight: 720,\n          targetFPS: 24,\n          compressionLevel: 3,\n        },\n        low: {\n          maxWidth: 854,\n          maxHeight: 480,\n          targetFPS: 15,\n          compressionLevel: 6,\n        },\n      },\n    };\n  }\n\n  private createServerUrl(): string {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.hostname;\n    // Always use port 8080 for the backend WebSocket connection\n    const port = '8080';\n    return `${protocol}//${host}:${port}/stream`;\n  }\n\n  private loadFromEnvironment(): void {\n    // Override with environment variables or URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    \n    if (urlParams.has('server')) {\n      this.config.serverUrl = urlParams.get('server')!;\n    }\n    \n    if (urlParams.has('quality')) {\n      // Quality parameter can be used to override settings\n    }\n  }\n\n  public get(): StreamConfig {\n    return this.config;\n  }\n\n  public getQuality(quality: keyof QualitySettings): QualityConfig {\n    return this.config.qualitySettings[quality];\n  }\n\n  public getServerUrl(): string {\n    return this.config.serverUrl;\n  }\n\n  public getReconnectAttempts(): number {\n    return this.config.reconnectAttempts;\n  }\n\n  public getReconnectDelay(): number {\n    return this.config.reconnectDelay;\n  }\n\n  public getHeartbeatInterval(): number {\n    return this.config.heartbeatInterval;\n  }\n\n  public getBufferSize(): number {\n    return this.config.bufferSize;\n  }\n}\n","import { StreamClient } from './stream/StreamClient';\nimport { UIController } from './ui/UIController';\nimport { Logger } from './utils/Logger';\nimport { Config } from './config/Config';\n\nclass App {\n  private streamClient: StreamClient;\n  private uiController: UIController;\n  private logger: Logger;\n  private config: Config;\n\n  constructor() {\n    this.config = new Config();\n    this.logger = new Logger();\n    this.uiController = new UIController(this.logger);\n    this.streamClient = new StreamClient(this.config, this.logger);\n    \n    this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    this.logger.info('Initializing RetroStream application...');\n    \n    try {\n      // Initialize UI\n      await this.uiController.initialize();\n      \n      // Setup event handlers\n      this.setupEventHandlers();\n      \n      // Auto-connect\n      await this.connect();\n      \n      this.logger.info('Application initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize application:', error);\n      this.uiController.showError('Initialization failed');\n    }\n  }\n\n  private setupEventHandlers(): void {\n    // Stream events\n    this.streamClient.on('connected', () => {\n      this.uiController.setConnectionStatus('connected');\n      this.logger.info('Connected to stream server');\n    });\n\n    this.streamClient.on('disconnected', () => {\n      this.uiController.setConnectionStatus('disconnected');\n      this.logger.warning('Disconnected from stream server');\n    });\n\n    this.streamClient.on('error', (error) => {\n      this.uiController.setConnectionStatus('error');\n      this.uiController.showError('Connection error');\n      this.logger.error('Stream error:', error);\n    });\n\n    this.streamClient.on('frame', (data) => {\n      this.uiController.renderFrame(data.data, data.metadata);\n      this.uiController.updateStats({\n        fps: this.streamClient.getCurrentFPS(),\n        latency: data.metadata.latency || 0,\n      });\n    });\n\n    // UI events\n    this.uiController.on('reconnect', () => {\n      this.connect();\n    });\n\n    this.uiController.on('qualityChange', (quality) => {\n      this.streamClient.setQuality(quality as 'high' | 'medium' | 'low');\n      this.logger.info(`Quality changed to: ${quality}`);\n    });\n\n    this.uiController.on('scaleChange', (scale) => {\n      this.uiController.setScale(scale);\n      this.logger.info(`Scale changed to: ${scale}x`);\n    });\n\n    this.uiController.on('fullscreen', () => {\n      this.uiController.toggleFullscreen();\n    });\n\n    this.uiController.on('screenshot', () => {\n      this.uiController.takeScreenshot();\n      this.logger.info('Screenshot captured');\n    });\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.streamClient.pause();\n      } else {\n        this.streamClient.resume();\n      }\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', () => {\n      this.uiController.handleResize();\n    });\n\n    // Graceful shutdown\n    window.addEventListener('beforeunload', () => {\n      this.streamClient.disconnect();\n    });\n  }\n\n  private async connect(): Promise<void> {\n    try {\n      this.uiController.setConnectionStatus('connecting');\n      this.logger.info('Attempting to connect to stream server...');\n      \n      await this.streamClient.connect();\n    } catch (error) {\n      this.logger.error('Failed to connect:', error);\n      this.uiController.setConnectionStatus('error');\n      this.uiController.showError('Failed to connect to server');\n    }\n  }\n}\n\n// Initialize the application when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', () => new App());\n} else {\n  new App();\n}\n"],"names":["EventEmitter","constructor","this","events","Map","on","event","handler","has","set","Set","get","add","off","handlers","delete","size","emit","data","forEach","error","console","String","once","onceHandler","removeAllListeners","clear","listenerCount","hasListeners","FrameBuffer","maxSize","buffer","currentIndex","addFrame","frame","push","length","shift","getLatestFrame","getFrame","index","getCurrentFrame","nextFrame","previousFrame","seekToLatest","Math","max","getBufferSize","getMaxSize","getBufferHealth","getOldestFrameAge","oldestFrame","Date","now","timestamp","getLatency","latestFrame","metadata","latency","dropOldFrames","maxAge","dropped","getFrameStats","bufferSize","oldestFrameAge","bufferHealth","ch2","u8","Uint8Array","u16","Uint16Array","i32","Int32Array","fleb","fdeb","clim","freb","eb","start","b","i","r","j","_a","fl","revfl","fd","rev","x","hMap","cd","mb","s","l","co","le","rvb","sv","r_1","v","m","flt","fdt","flrm","fdrm","a","bits","d","p","o","bits16","shft","slc","e","subarray","ec","err","ind","msg","nt","Error","code","captureStackTrace","inflt","dat","st","buf","dict","sl","dl","f","noBuf","resize","noSt","cbuf","bl","nbuf","final","pos","bt","lm","dm","lbt","dbt","n","tbts","type","t","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","c","lt","dt","lms","dms","lpos","sym","dsym","end","dend","min","et","wcln","fn","fnStr","td","toString","ks","slice","indexOf","lastIndexOf","replace","split","k","st_1","prototype","spInd","ch","wrkr","fns","init","id","cb","td_1","mrg","transfer","w","Worker","URL","createObjectURL","Blob","onmessage","ed","$e$","stack","postMessage","wk","cbfs","bInflt","inflateSync","pbf","gopt","guze","gzs","gzl","zule","zls","out","dictionary","cbify","opts","terminate","consume","flg","zs","gunzipSync","unzlibSync","decompress","ev","gunzip","inflate","unzlib","TextDecoder","decode","stream","Decompressor","decoder","compressedData","Promise","resolve","reject","fflateDecompress","decompressed","message","decompressZstd","isCompressionSupported","algorithm","toLowerCase","decompressGzip","getStats","totalDecompressions","totalInputBytes","totalOutputBytes","averageCompressionRatio","StreamClient","config","logger","super","reconnectAttempts","currentQuality","isConnected","isPaused","stats","fps","droppedFrames","totalFrames","fpsCounter","frames","lastTime","currentFPS","frameBuffer","decompressor","setupStatsTracking","connect","ws","readyState","WebSocket","CONNECTING","info","getServerUrl","binaryType","setupWebSocketHandlers","waitForConnection","handleConnectionError","onopen","startHeartbeat","onclose","warning","reason","handleDisconnection","onerror","handleMessage","timeout","setTimeout","addEventListener","clearTimeout","frameData","parseFrameMessage","processFrame","header","payload","view","DataView","byteLength","headerLength","getUint32","headerBytes","headerText","JSON","parse","updateFPS","expectedSize","width","height","imageData","ImageData","Uint8ClampedArray","statsTimer","window","setInterval","heartbeatTimer","OPEN","send","stringify","getHeartbeatInterval","stopHeartbeat","getReconnectAttempts","scheduleReconnect","delay","getReconnectDelay","pow","reconnectTimer","catch","clearInterval","disconnect","close","pause","debug","resume","setQuality","quality","qualityConfig","getQuality","getCurrentFPS","isConnectedState","UIController","currentScale","isFullscreen","initialize","setupDOMElements","setupEventHandlers","setupCanvas","document","canvas","getElementById","connectionStatus","latencyCounter","loadingOverlay","errorOverlay","reconnectBtn","qualitySelect","scaleSlider","scaleValue","fullscreenBtn","screenshotBtn","ctx","getContext","hideError","target","value","scale","parseFloat","setScale","preventDefault","ctrlKey","fullscreenElement","updateFullscreenButton","resizeCanvas","handleResize","applyCanvasScale","scaledWidth","scaledHeight","style","renderFrame","putImageData","classList","contains","setConnectionStatus","status","remove","textContent","connected","connecting","disconnected","showLoading","hideLoading","showError","updateStats","round","toggleFullscreen","exitFullscreen","documentElement","requestFullscreen","takeScreenshot","link","createElement","download","href","toDataURL","click","errorText","querySelector","toUpperCase","getCanvas","getCurrentScale","isInFullscreen","LogLevel","Logger","logs","maxLogs","logLevel","setupLogContainer","setup","logContainer","log","level","entry","consoleMessage","toLocaleTimeString","warn","updateLogDisplay","logElement","className","prefix","getLogPrefix","appendChild","children","removeChild","firstChild","scrollTop","scrollHeight","setLogLevel","getLogs","clearLogs","innerHTML","Config","getDefaultConfig","loadFromEnvironment","serverUrl","createServerUrl","reconnectDelay","heartbeatInterval","qualitySettings","high","maxWidth","maxHeight","targetFPS","compressionLevel","medium","low","location","protocol","hostname","urlParams","URLSearchParams","search","App","uiController","streamClient","hidden"],"mappings":"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","x_google_ignoreList":[2]}